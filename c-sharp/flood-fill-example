using System;
using System.Collections.Generic;

/*
* The Problem:
* Given a grid consisting of ‘.’ (visitable points) and ‘#’ (un-visitable points), and other entities for the defence towers, output a map showing the area coverage of each tower, based on distance.
* -------------------------------------------------- xxx --------------------------------------------------
* 
* Rules:
* 1. Each tower has an I.D., which is not '#', '.' or '+'. Note that 2 towers may have the same I.D..
* 2. If 2 towers can reach a spot at the exact same time, mark that spot '+'.
* 3. Towers can't send troops through un-visitable spots ('#').
* 4. If a tower can get to a spot first, mark the spot by its I.D..
* 5. This is the legend:
* (i) '.' = reachable nodes
* (ii) '#' = unreachable nodes
* (iii) any other character = a tower's I.D.
* 6. Troops sent out by the towers at a particular spot can immediately move by distance 1 in the cardinal directions, i.e. UP, DOWN, LEFT, RIGHT (diagonals not possible).
* 7. If a spot on the map cannot be accessed (regardless of whether it is visitable or not) assign that spot with the character it had in the original map.
* -------------------------------------------------- xxx --------------------------------------------------
* 
* Example:
* 
* consider the following grid:
* ...#.
* A#...
* #..B.
* .....
* 
* At time = 1, they will reach…
* A..#.
* A#.B.
* #.BBB
* ...B.
* 
* At time = 2, they will reach…
* AA.#.
* A#BBB
* #BBBB
* ..BBB
* 
* At time = 3, they will reach…
* AA+#B
* A#BBB
* #BBBB
* .BBBB
* (Note that, both A and B can reach spot (2,0) at time = 3, so that spot is made into ‘+’)
* 
* At time = 4, they will reach…
* AA+#B
* A#BBB
* #BBBB
* BBBBB
*/
class Solution
{
    // Set of the current nodes we are checking
    private static Dictionary<(int, int), int> frontier = new Dictionary<(int, int), int>();
    // Neighbouring nodes to the frontier that have not been checked
    private static Dictionary<(int, int), int> nextFrontier = new Dictionary<(int, int), int>();
    // towers can have the same value, so we need to link names with an unique id
    private static readonly List<char> towerIDs = new List<char>();
    // game map
    private static char[,] map;
    
    public static void Main(string[] args)
    {
        int W = int.Parse(Console.ReadLine());
        int H = int.Parse(Console.ReadLine());
        map = new char[W,H];
        towerIDs.Add('+'); // Set ID 0 to +

        for (int y = 0; y < H; y++)
        {
            string row = Console.ReadLine();
            for(int x = 0; x < W; x++)
            {
                map[x, y] = row[x];
                if(row[x] != '.' && row[x] != '#')
                {
                    towerIDs.Add(row[x]);
                    frontier.Add((x, y), towerIDs.Count - 1);
                }
            }
        }

        // When the frontier is empty, we have reached all areas of the map
        while(frontier.Count > 0)
        {
            // Reset next Frontier
            nextFrontier = new Dictionary<(int, int), int>();
            // Step over each frontier node and check its neighbors for flooding
            foreach(KeyValuePair<(int X, int Y), int> pair in frontier)
            {
                // Get Frontiers 
                // check up when within constraints
                if(pair.Key.Y != 0)
                {
                    ClaimFrontier(pair.Key.X, pair.Key.Y - 1, pair.Value);
                }

                // check down when within constraints
                if(pair.Key.Y < H - 1)
                {
                    ClaimFrontier(pair.Key.X, pair.Key.Y + 1, pair.Value);
                }

                // check left when within constraints
                if(pair.Key.X != 0)
                {
                    ClaimFrontier(pair.Key.X - 1, pair.Key.Y, pair.Value);
                }

                // check right when within constraints
                if(pair.Key.X < W - 1)
                {
                    ClaimFrontier(pair.Key.X + 1, pair.Key.Y, pair.Value);
                }
            }

            // Fill the next frontier positions on the map with tower IDs or +
            foreach(KeyValuePair<(int X, int Y), int> pair in nextFrontier)
            {
                map[pair.Key.X, pair.Key.Y] = towerIDs[pair.Value];
            }

            // Step to the next round using the nextFrontier coordinates
            frontier = nextFrontier;
        }

        // output each row in the map as a string
        for(int y = 0; y < H; y++)
        {
            string row = "";
            for(int x = 0; x < W; x++)
            {
                row += map[x, y];
            }
            Console.WriteLine(row);
        }
        
    }

    /**
    * Request a node to be added to a tower's frontier. If the node already has a
    * claim on it, neither tower is allowed move to those coords and the node is 
    * assigned a + on the map  
    */
    private static void ClaimFrontier(int x, int y, int towerID)
    {
        // Has this node been claimed
        if(nextFrontier.ContainsKey((x, y)))
        {
            // check for duplicate claims by the same tower id
            if(nextFrontier[(x, y)] != towerID)
            {
                nextFrontier[(x, y)] = 0;
            }
        }
        //viable nodes are designated as a .
        else if(map[x, y] == '.')
        {
            nextFrontier.Add((x, y), towerID);
        }
    }
}
